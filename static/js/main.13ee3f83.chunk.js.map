{"version":3,"sources":["images/secondpic.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["END_DATE","Date","Knob","bgColor","borderRadius","boxSizing","width","padding","position","h","pos","top","left","right","App","React","useState","Math","max","getTime","countDownTime","setCountDownTime","useInterval","now","days","floor","date_diff","lightOn","setLightOn","w","direction","mt","mx","align","gridGap","flex","justify","ml","color","fontSize","getHours","toString","padStart","getMinutes","getSeconds","as","SunIcon","cursor","onClick","m","src","pic","alt","display","pointerEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAe,MAA0B,sC,uBCOnCA,EAAW,IAAIC,KAAK,uBAEpBC,EAAiB,WACrB,OACE,cAAC,IAAD,CACEC,QAAQ,UACRC,aAAa,OACbC,UAAU,aACVC,MAAM,KACNC,QAAQ,KACRC,SAAS,WACTC,EAAE,cAPJ,SASE,cAAC,IAAD,CACEN,QAAQ,QACRM,EAAE,QACFC,IAAI,WACJC,IAAI,MACJC,KAAK,MACLC,MAAM,WAoFCC,MA9Ef,WAAgB,IAAD,EAC6BC,IAAMC,SAC9CC,KAAKC,IAAIlB,EAASmB,WAAY,IAAIlB,MAAOkB,UAAW,IAFzC,mBACNC,EADM,KACSC,EADT,KAIbC,aAAY,WACV,IAAMC,EAAM,IAAItB,KAChBoB,EAAiBJ,KAAKC,IAAIlB,EAASmB,UAAYI,EAAIJ,UAAW,MAC7D,KAEH,IAAIK,EAAOP,KAAKQ,MAAML,EAAgB,IAAO,GAAvB,MAClBM,EAAY,IAAIzB,KAAKmB,GAVZ,EAYiBL,IAAMC,UAAS,GAZhC,mBAYNW,EAZM,KAYGC,EAZH,KAcb,OACE,cAAC,IAAD,CAAQzB,QAAQ,QAAQM,EAAE,QAAQoB,EAAE,QAApC,SACE,eAAC,IAAD,CAAK1B,QAAQ,UAAU0B,EAAE,UAAUpB,EAAE,UAArC,UACE,cAAC,IAAD,CAAKqB,UAAU,MAAM3B,QAAQ,UAAU4B,GAAG,QAAQC,GAAG,QAAQvB,EAAE,SAA/D,SACE,eAAC,IAAD,CACEqB,UAAU,MACVrB,EAAE,OACFwB,MAAM,SACNC,QAAQ,QACRF,GAAG,QALL,UAOE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,eAAC,IAAD,CAAMG,KAAK,IAAI1B,EAAE,OAAOwB,MAAM,SAASG,QAAQ,SAA/C,UACE,cAAC,IAAD,CAAKP,EAAE,MAAMQ,GAAG,UAChB,cAAC,IAAD,CAAQlC,QAAQ,QAAQM,EAAE,MAAMoB,EAAE,MAAlC,SACE,eAAC,IAAD,CAAMS,MAAM,QAAQC,SAAS,QAA7B,UACGf,EADH,KACWE,EAAUc,WAAWC,WAAWC,SAAS,EAAG,KADvD,IAEGhB,EAAUiB,aAAaF,WAAWC,SAAS,EAAG,KAFjD,IAGGhB,EAAUkB,aAAaH,WAAWC,SAAS,EAAG,UAGnD,cAAC,IAAD,CACEG,GAAIC,IACJT,GAAG,QACHR,EAAE,MACFpB,EAAE,OACFsC,OAAO,UACPC,QAAS,kBAAMpB,GAAYD,IAC3BW,MAAOX,EAAU,QAAU,gBAG/B,cAAC,EAAD,IACA,cAAC,EAAD,SAGJ,cAAC,IAAD,CACEI,GAAG,QACHtB,EAAE,QACFN,QAAQ,UACRC,aAAa,QACb4B,GAAG,UAEL,cAAC,IAAD,CACE7B,QAAQ,QACR8C,EAAE,QACFlB,GAAG,QACHtB,EAAE,SACFL,aAAa,QALf,SAOE,cAAC,IAAD,CACE8C,IAAKC,EACLC,IAAI,qBACJC,QAAS1B,EAAU,QAAU,OAC7BE,EAAE,MACFpB,EAAE,OACF6C,cAAc,iBCxFXC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13ee3f83.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/secondpic.9fbd31e3.jpg\";","import React from 'react'\nimport { Box, Center, Flex, Icon, Text, Image } from '@chakra-ui/react'\nimport { useInterval } from '@chakra-ui/hooks'\nimport pic from './images/secondpic.jpg'\nimport './App.css'\nimport { SunIcon } from '@chakra-ui/icons'\n\nconst END_DATE = new Date('2022-07-07T00:00:00')\n\nconst Knob: React.FC = () => {\n  return (\n    <Box\n      bgColor=\"#1b3542\"\n      borderRadius=\"full\"\n      boxSizing=\"border-box\"\n      width=\"4%\"\n      padding=\"4%\"\n      position=\"relative\"\n      h=\"fit-content\"\n    >\n      <Box\n        bgColor=\"white\"\n        h=\"2vmin\"\n        pos=\"absolute\"\n        top=\"10%\"\n        left=\"47%\"\n        right=\"47%\"\n      />\n    </Box>\n  )\n}\n\nfunction App() {\n  const [countDownTime, setCountDownTime] = React.useState<number>(\n    Math.max(END_DATE.getTime() - new Date().getTime(), 0)\n  )\n  useInterval(() => {\n    const now = new Date()\n    setCountDownTime(Math.max(END_DATE.getTime() - now.getTime(), 0))\n  }, 100)\n\n  var days = Math.floor(countDownTime / 1000 / 60 / (60 * 24))\n  var date_diff = new Date(countDownTime)\n\n  const [lightOn, setLightOn] = React.useState(false)\n\n  return (\n    <Center bgColor=\"white\" h=\"100vh\" w=\"100vw\">\n      <Box bgColor=\"#c1c1c1\" w=\"100vmin\" h=\"100vmin\">\n        <Box direction=\"row\" bgColor=\"#526477\" mt=\"1vmin\" mx=\"2vmin\" h=\"15vmin\">\n          <Flex\n            direction=\"row\"\n            h=\"full\"\n            align=\"center\"\n            gridGap=\"2vmin\"\n            mx=\"2vmin\"\n          >\n            <Knob />\n            <Knob />\n            <Flex flex=\"1\" h=\"100%\" align=\"center\" justify=\"center\">\n              <Box w=\"10%\" ml=\"2vmin\" />\n              <Center bgColor=\"black\" h=\"50%\" w=\"50%\">\n                <Text color=\"white\" fontSize=\"4vmin\">\n                  {days}d {date_diff.getHours().toString().padStart(2, '0')}:\n                  {date_diff.getMinutes().toString().padStart(2, '0')}:\n                  {date_diff.getSeconds().toString().padStart(2, '0')}\n                </Text>\n              </Center>\n              <Icon\n                as={SunIcon}\n                ml=\"2vmin\"\n                w=\"10%\"\n                h=\"auto\"\n                cursor=\"pointer\"\n                onClick={() => setLightOn(!lightOn)}\n                color={lightOn ? 'white' : 'gray.400'}\n              />\n            </Flex>\n            <Knob />\n            <Knob />\n          </Flex>\n        </Box>\n        <Box\n          mt=\"6vmin\"\n          h=\"4vmin\"\n          bgColor=\"#566478\"\n          borderRadius=\"5vmin\"\n          mx=\"2vmin\"\n        />\n        <Center\n          bgColor=\"black\"\n          m=\"2vmin\"\n          mt=\"6vmin\"\n          h=\"66vmin\"\n          borderRadius=\"4vmin\"\n        >\n          <Image\n            src={pic}\n            alt=\"Ultrasound picture\"\n            display={lightOn ? 'block' : 'none'}\n            w=\"85%\"\n            h=\"auto\"\n            pointerEvents=\"none\"\n          />\n        </Center>\n      </Box>\n    </Center>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { ChakraProvider } from '@chakra-ui/react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}